# -*- coding: utf-8 -*-
"""
Created on Sat Sep 15 21:52:51 2018

@author: Anton
"""

import base64
import os

"""  use this to get the bytes from an image
with open("add.png", "rb") as imageFile:
    string = base64.b64encode(imageFile.read())
    print(len(string ))
"""

#%%
def resourceimages(directory1,directory2):
    #%%
    img_add = b'iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAMAAAAoLQ9TAAAAA3NCSVQICAjb4U/gAAAACXBIWXMAAAByAAAAcgGxhqEaAAAAGXRFWHRTb2Z0d2FyZQB3d3cuaW5rc2NhcGUub3Jnm+48GgAAADxQTFRF////AP//L7yoMr2mMr+nMr2lMr2nMb6mMr6mMr6mMr6mU8i0Vsm2V8q2ctLCedTFo+LXp+PZrOXb////ilgfwAAAAAp0Uk5TAAEmcH+As7Xm9myQZpsAAABmSURBVBhXZY9JDgIxDAQ7CfEkRQZD/P+/cmARwnVsqTdJUu02hvWqF6VNAJitSFI5+HIUSQ1g7X0FaFKdAB5xA5hVnV+BiwyW+yPi7r7ANGDHmw0jCwbnx3KC5dBUm4bl6enc3/0n7VQJRdrrCvEAAAAASUVORK5CYII='
    img_min = b'iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAAAHEAAABxARw/gHcAAAAZdEVYdFNvZnR3YXJlAHBhaW50Lm5ldCA0LjAuMjHxIGmVAAAAx0lEQVQ4T61TMQ4CIRDEz9gaeYx+w9ZKPyNnYWe0krOy0NrOWp9Au85uOMIZ4DR4yVzIMjMwCygi6mFy2o613ay1bfa6NS8Bj1HjuU9+PBhpaxYQOIAycMxhbs+AC9PWHBKCJJjbmYiBXzlJzgIaMZDM5W3n4FiL1dGwNGEY52YFA+m2FGbXIy3vlyKYEwygVRjwUUlh93wgVvljTjCA9g8GUYT5bTgCc4KBRKhtYvUxIlbdRfK/uqvcmfid/P6YYkhPvn7OpN7WSav5gthTvwAAAABJRU5ErkJggg=='
    img_openbook = b'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'
    img_repeat = b'iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAMAAABEpIrGAAAAA3NCSVQICAjb4U/gAAAACXBIWXMAAAejAAAHowEwL7LFAAAAGXRFWHRTb2Z0d2FyZQB3d3cuaW5rc2NhcGUub3Jnm+48GgAAAVBQTFRF/////21t/2Bg9GBg9WZm+WBg+GJi92Nj92Rk92Nj92Nj92Nj92Nj92Nj92Nj92Nj92Nj92Nj92Rk92Vl92Zm92dn92ho92lp92pq92tr92xs+G1t+G9v+HFx+HJy+HNz+HR0+HZ2+Hh4+Hl5+Hp6+Ht7+Hx8+H19+H5++H9/+ICA+YCA+YOD+YSE+YWF+YeH+YqK+YuL+Y2N+ZCQ+ZKS+ZOT+o6O+pWV+pmZ+pyc+p2d+p6e+qCg+qSk+qam+6qq+6ur+6ys+62t+6+v+7Ky+7Oz+7S0+7e3+7i4+7m5+7q6/Lq6/L6+/MLC/MPD/MTE/MXF/MfH/MrK/MzM/M3N/c/P/dHR/dTU/dXV/dra/d3d/d/f/eDg/uHh/uPj/uXl/ufn/ujo/urq/uvr/u3t/u/v/vHx/vLy/vX1//j4//n5//v7//z8//39//7+////bQjgYQAAABF0Uk5TAAcIGBktSYSXmMHI2uPy8/XVqDFbAAABm0lEQVQ4y4VTV1vCQBBMUBMCQUgUbKBYsMWKDbB3xd57F6Vm/v+bySW5HPD5MQ/XZu9ud3aX4yh4QfLJwaDskwSeq0ezt1WhaPU219AeMaRUISR6WL7Jr9TB3+TyLQH7MLHV61oEWuh9h1cu8TvHWNhveNz3J3+gH4bdXyw/RObj2B3wPEi3IomP+t8zrmnaUQXFDI3FjNZrrUcuPnQ4OO+0LbyGfkQfdaMEBjttjmI8J5DFMfCUTkTC4e4TIDfjOiVwkjnN6tgll8begJso47XE+cwPvnBNtvMllNaq9PRxsjEOQ4/ZQr2PO9Q6iUXmgsaYwbt1GE11OPwoiuYUJAZ7OKNvTiSteQWvloH5RX92yKbbD3RY+Tq1LsnESYrBJ+BWNVdTFaQsJyWGTxdQ3iS89oU7O0yB0l0XwOd0JBKJJvfLyMdtoXinFCdyrNgPA47UTrKUhQJl8/erKk2Wm+74I/CyaGR8QK1Kt1sw6nYF+SU2KrG25Ka/gaxSW3JM0So9V0BfbdEyZW8gtVxf9o0bp3HrNW7e/9v/D7wcbGosljpAAAAAAElFTkSuQmCC'
    img_repeat_na = b'iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAMAAABEpIrGAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAMAUExURQAAABQUFB4eHiQODiYPDyYRESYTEyUWFiMZGScYGCcfHzQUFDccHDQdHToXFzoYGDoZGToaGjkbGzoeHicgICchISciIiQkJCgmJigoKDonJzsrKzsuLjswMDgzMzs2Njs4ODw7Ozw8PHsxMXs0NHxQUHNzc353d3l5eX9/f99ZWd9aWt9eXuteXuBkZOBpaetiYux5efdjY/dkZPdlZfdnZ/doaPdpafdsbPhtbfhxcfhycvhzc/h0dPh2dvh4ePh5efh6evh7e/h8fPh+fviAgPiEhPmFhfmHh/mLi/qOjvmQkPqVlfqZmfqdnfqenvqgoPuqqvurq/usrPutrfqurvuvr/uzs/u0tPu5ufu6uvy6uvy+vuXKyubd3fHPz/zCwvzDw/zExPzKyvzMzPzNzf3U1P3d3efj4+fn5/Pv7/3g4P7h4f7j4/7l5f7n5/7q6v7r6/7t7fPw8PPy8vPz8/7x8f7y8v719f/5+f/8/P/9/f/+/v///wnVe0AAAEAdFJOU////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////wBT9wclAAAACXBIWXMAAAeiAAAHogHiaFAhAAAAGXRFWHRTb2Z0d2FyZQBwYWludC5uZXQgNC4wLjIx8SBplQAAAfFJREFUOE+Nk+dz00AQxTcmItSQmCo67haYciYxCSW0iBCIqaaE3gKiBxAk2Pu3i7d3K9uZIQzvw81q3+800hb6D2UqVahcLOS7KhTLkqtkxB+gXJIkrYZZoUYLyRxMopIPItR8n0L4fglANfEpW3PJi3dPuwCqZclPqhZIPBp2xCv+dc0G8IfJSxQIg0Elwp/ceTim/mAQOqBlTJeYXGD+cF59Y1oClOX7LTExDT1q83JTfdMoAyjKTROspQM/WBXvdb4xRQAFCeq33+FvY/VzqW8KAPISPGZ+sp62HB879Zzjg13f5BW42uH7J+U7TnzmeF/PT4H6Ir/BE4hD8fvdfX4KXOLOpDwGG2j/ptS/1cShQJO/2Jw5OkS0xvmXeRmnAg/4pU2a2kaiza7qN/kTTgXOzV+wSdRn3U4atcQLe0kBFfwdUbTNVv1Km+eQWgHA3xX9vnNYqj69yAuS6wdqI+RHX2fGx494tOc7L52VpAC21PC3wneljlD1Z1M2K6V2zbLvdz7z0+3afdss227p77G3zB9n0fGpejoftt0yMOIHpn6vzUvX7U0l7MBg5JwPzXxjnu8ROnJJku32Z+I18xkbgcimQ5sjr9e/uRsaBB72RYAK9uPvi4O/rQDIwF9l9XyY0EBpteUtyWr+W0R/ACZVythfCBVSAAAAAElFTkSuQmCC'
    img_switch = b'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'
    usercommands = b'IyMKCk5vdGU6IAoKSW4gdGhpcyBmaWxlIHlvdSBjYW4gcHV0IGFsbCB5b3VyIHVzZXIgZGVmaW5lZCBjb21tYW5kIHlvdSd2ZSB1c2VkIGluIGEgTGFUZVggZmlsZS4KDQpVc2VyIGRlZmluZWQgY29tbWFuZHMgYXJlIHVzZWZ1bCBpbiBjYXNlIHlvdSBkaWRuJ3Qgd2FudCB0byB3cml0ZSB0aGUgc2FtZSBkaXN0cmlidXRpb24gCmFnYWluIGFuZCBhZ2FpbiBkdXJpbmcgYSBsZWN0dXJlLCBvciB0aGUgc2FtZSBsb25nIGZvcm11bGEgdXNpbmcgbWFueSBMYVRlWCBjb21tYW5kcyBidXQKd2hpY2ggb25seSBoYXMgYSBmZXcgaW5wdXRzLg0KCgpUaGV5IGFsbCBoYXZlIHRoZSBzYW1lIHBhdHRlcm46CglcbmV3Y29tbWFuZHsgdXNlciBkZWZpbmVkIGNvbW1hbmQgfVsgTnVtYmVyIG9mIGlucHV0cyBdeyBjb21tYW5kcyBrbm93biBieSBMYVRleCB3aGVyZSAjaSBpcyB0aGUgaXRoIGlucHV0fQoKClRoZSBwcm9ncmFtIHdpbGwgcmVtb3ZlIGV2ZXJ5dGhpbmcgYmVmb3JlIHRoZSBmaXJzdCAiIyMjIiANCml0IGVuY291bnRlcnMsIGJ1dCB5b3UgY2FuIHNhZmVseSByZW1vdmUgYWxsIHRoZXNlIG5vdGVzLiBUaGUgcHJvZ3JhbSB3aWxsIG9ubHkgbG9vayBhdCBsaW5lcyBjb250YWluaW5nICJuZXdjb21tYW5kIgoKCllvdSBjYW4gcHV0IFxuZXdjb21tYW5ke1xlbnZ9WzFdeyMxfSBpbiBhIExhVGVYIGZpbGUsIGhvd2V2ZXIgRE9OVCBwdXQgaXQgZG93biBoZXJlLiAKCiMjIwoKCgoNCg0KXG5ld2NvbW1hbmR7XHNlY3Bhcn1bMl17XGZyYWN7XHBhcnRpYWxeMiAjMX17XHBhcnRpYWwgIzJeMn19ClxuZXdjb21tYW5ke1xkaXN0fVswXXtcaGJhcl4yK1xzcXJ0e1xiZXRhfX0K'
    
    images = [img_add,img_min,img_openbook, img_repeat,img_repeat_na,img_switch]
    namelist = ["add.png","min.png","open-book1.png","repeat.png","repeat_na.png","switch.png"]


    for i in range(len(images)):
        try:
            path = os.path.join(directory1, namelist[i]) # if png image doesn't yet exist then save png image
            if not os.path.exists(path):
                fh = open(path, "wb")
                fh.write(base64.b64decode(images[i]))
                fh.close()
        except:
            pass
    # user defined commands, LaTeX short cuts
    path = os.path.join(directory2, "usercommands.txt")
    if not os.path.exists(path):
        fh = open(path, "wb")
        fh.write(base64.b64decode(usercommands))
        fh.close()
        